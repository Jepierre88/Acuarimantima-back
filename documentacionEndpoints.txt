POST /signup
Este endpoint se utiliza para registrar un nuevo usuario en el sistema.

	URL: /signup
	Método: POST
	Descripción: Crea un nuevo usuario con la información proporcionada.

Solicitud:
	Cuerpo de la solicitud (application/json):
	Se espera un objeto con la siguiente estructura:
		{
  			"email": "user@example.com",
  			"username": "user123",
  			"firstName": "John",
  			"lastName": "Doe",
  			"password": "password123"
		}
Propiedades:
	email (string, requerido): El correo electrónico del usuario usado para ingresar al sistema.
	username (string, requerido): Usuario usado para ingresar al sistema.
	firstName (string, requerido): El nombre del usuario.
	lastName (string, requerido): El apellido del usuario.
	password (string, requerido): La contraseña del usuario, debe tener al menos 5 caracteres.

Respuesta
	Código 200:
		Descripción: El usuario fue creado exitosamente.
	Cuerpo de la respuesta (application/json):
		{
  			"id": "12345",
  			"email": "user@example.com",
  			"username": "user123",
  			"firstName": "John",
  			"lastName": "Doe"
		}
Errores posibles:
	400: La contraseña no cumple con los requisitos mínimos.
	400: Campos requeridos faltantes.
	401: Usuario ya registrado.

POST /users/login
Este endpoint se utiliza para autenticar a un usuario y generar un token JWT.

	URL: /users/login
	Método: POST
	Descripción: Autentica a un usuario y devuelve un token JWT junto con un perfil de usuario básico.

Solicitud
	Cuerpo de la solicitud (application/json):
	Se espera un objeto con las credenciales del usuario:
	{
  		"email": "user@example.com",
  		"password": "password123"
	}

	El campo de “email” también permite ingresar el username

Propiedades:

	email (string, requerido): El correo electrónico o nombre de usuario del usuario.
	password (string, requerido): La contraseña del usuario.

Respuesta
	Código 200:
		Descripción: Autenticación exitosa.
	Cuerpo de la respuesta (application/json):
		{
  			"token": "jwt-token-aqui",
  			"user": {
    				"email": "user@example.com",
    				"firstName": "John",
    				"lastName": "Doe",
    				"realm": "user-realm"
  				}
		}
Errores posibles:
	401: Usuario no encontrado o credenciales inválidas.
	401: El usuario ha sido eliminado.
	401: Contraseña incorrecta.

Resumen de Errores Comunes
	400: Solicitud incorrecta (campos faltantes o inválidos).
	401: No autorizado (usuario no encontrado, usuario eliminado, contraseña incorrecta).


Products:


POST /products
Crea una nueva instancia del modelo Products.

	URL: /products
	Method: POST
	Auth Required: JWT Authentication (Bearer Token)

Solicitud:
	Cuerpo de la solicitud (application/json):
	Se espera un objeto con la siguiente estructura:
		{
  			"name": "string",
  			"value": "number",
  			"enableTaxes": "boolean",
  			"taxesPorcentaje": "number"
		}
Propiedades:

	name: Nombre del producto (obligatorio, debe tener más de 3 caracteres).
	value: Valor del producto (por defecto 0 si no se especifica).
	enableTaxes: Indica si los impuestos están habilitados (por defecto false si no se especifica).
	taxesPorcentaje: Porcentaje de impuesto (por defecto 0, debe ser mayor a 0 si enableTaxes es true).

Respuesta

	Código 200:
		Descripción: El producto fue creado exitosamente.
	Cuerpo de la respuesta (application/json):
		{
 		 	"id": "number",
  			"name": "string",
  			"value": "number",
  			"enableTaxes": "boolean",
  			"taxesPorcentaje": "number",
  			"eliminated": false
		}
Errores posibles:

	400 Bad Request: Error en la validación de los datos (ejemplo: nombre del producto ya existe o el porcentaje de 			impuestos no es válido).

	500 Internal Server Error: Error en el servidor al intentar crear el producto.


GET /products
Obtiene una lista de todas las instancias de Products.

	URL: /products
	Method: GET
	Auth Required: No
	Query Parameters (Opcional):
	Puedes aplicar filtros a través de los parámetros de consulta.

Respuesta
Código 200:
		Descripción: Retorna una lista de productos con sus relaciones (no se excluye los productos que han sido 				eliminados).
	[
  		{
    			"id": "number",
    			"name": "string",
    			"value": "number",
    			"enableTaxes": "boolean",
    			"taxesPorcentaje": "number",
    			"eliminated": "boolean"
  		}
	]


GET /products/{id}
Obtiene una instancia de Products por su ID.

	URL: /products/{id}
	Method: GET
	Auth Required: No
	Path Parameters:
	id (obligatorio): ID del producto que se desea consultar.

Respuesta

	Código 200:
		Descripción: Retorna el producto solicitado.

	{
  		"id": "number",
  		"name": "string",
  		"value": "number",
  		"enableTaxes": "boolean",
  		"taxesPorcentaje": "number",
  		"eliminated": "boolean",
	}

Errores posibles:
	404 Not Found: Producto no encontrado.


PATCH /products/{id}
Actualiza una instancia de Products por su ID.

	URL: /products/{id}
	Method: PATCH
	Auth Required: JWT Authentication (Bearer Token)
	Path Parameters:
		id (obligatorio): ID del producto que se desea actualizar.
Solicitud:
	Cuerpo de la solicitud (application/json):
	{
  		"name": "string",
  		"value": "number",
  		"enableTaxes": "boolean",
  		"taxesPorcentaje": "number"
	}

Respuesta
Código 200:
		Descripción: Retorna el producto con los cambios realizados.

	{
  		"id": "number",
  		"name": "string",
  		"value": "number",
  		"enableTaxes": "boolean",
  		"taxesPorcentaje": "number",
  		"eliminated": "boolean",
	}

Errores posibles:
	400 Bad Request: Error en la validación de los datos (ejemplo: impuesto habilitado pero porcentaje de impuestos es 0).


DELETE /products/{id}
Marca un producto como eliminado (eliminación lógica).

	URL: /products/{id}
	Method: DELETE
	Auth Required: JWT Authentication (Bearer Token)
	Path Parameters:
		id (obligatorio): ID del producto que deseas eliminar.
Respuesta

	204 No Content: Producto marcado como eliminado exitosamente.
	404 Not Found: Producto no encontrado.




